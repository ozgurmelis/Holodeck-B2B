<module name="holodeckb2b-core" class="org.holodeckb2b.module.HolodeckB2BCore">
    <!--                                                                 -->             
    <!--                   Holodeck B2B parameters                       -->             
    <!--                                                                 -->             
    
    <!-- ====================================================================
    - The name of the JPA persistency unit that should be used to access the
    - database
    ===================================================================== -->
    <parameter name="PersistencyUnit">hb2b-core-derby</parameter>
    
    <!-- ====================================================================
    - During the message processing a host name may be needed, for example 
    - for generating a message id. Because the host name of the machine 
    - Holodeck B2B runs on may be for internal use only it is possible to set
    - an external host name using this parameter.
    ===================================================================== -->
    <!-- <parameter name="ExternalHostName"/> -->
    
    <!-- ====================================================================
    
    ===================================================================== -->
    <!-- <parameter name="WorkerConfig">conf/workers.xml</parameter> -->
    
    <!-- ====================================================================
    - This parameter sets the directory that should be used for temporarily 
    - storing data. If it is not set here a "temp" directory is created
    - in the "repository" directory of the Holodeck B2B install
    ===================================================================== -->
    <!-- <parameter name="TempDir"/> -->
    
    <!-- ====================================================================
    - This parameter enables bundling of multiple signal message units in of
    - the same type in a response message. When enabled Holodeck B2B can add 
    - multiple signal message units generated during the processing of the 
    - request message to the response preventing loss of information. 
    - NOTE: This will create ebMS messages that DO NOT conform to the ebMS 
    - v3 Core Spec and AS4 profile!
    - The default setting is not to allow this bundling to ensure Core Spec 
    - and AS4 compliant ebMS messages. To enable the feature set the value
    - of this parameter to "on" or "true".
    ===================================================================== -->
    <parameter name="AllowSignalBundling">off</parameter>
    
    <!-- ====================================================================
    - This parameter conatains the default setting whether Errors on Errors 
    - should be reported to the sender of the faulty error. This setting can 
    - be overriden in the P-Mode configuration. However the problem that 
    - causes an error to be in error is often an invalid message reference. 
    - In such cases the error can not be assigned a P-Mode, so the P-Mode can
    - not configure the behaviour and this default setting is used.
    ===================================================================== -->
    <parameter name="ReportErrorOnError">false</parameter>
    
    <!-- ====================================================================
    - This parameter contains the default setting whether Errors on Receipts 
    - should be reported to the sender of the receipt in error. This setting 
    - can be overriden in the P-Mode configuration. 
    ===================================================================== -->
    <parameter name="ReportErrorOnReceipt">false</parameter>
    
    <!-- ====================================================================
    - The password for the Java keystore holding the certificates with the
    - private keys used for signing and decrypting a messsage.
    ===================================================================== -->
    <parameter name="PrivateKeyStorePassword"></parameter>
    
    <!-- ====================================================================
    - The password for the Java keystore holding the certificates with the
    - public keys used for verification of signatures and encryption of 
    - a messsage.
    ===================================================================== -->
    <parameter name="PublicKeyStorePassword"></parameter>
    
    <!-- ====================================================================
    - This parameter contains the default setting whether the revocation of 
    - certifcates should be checked. 
    - NOTE: As an error that occurs during the revocation check will result 
    - in rejection of the complete ebMS message the revocation check should
    - only be enable if the PKI is correctly and fully implemented.
    - If required the revocation check can be enable in the P-Mode.
    ===================================================================== -->
    <parameter name="CertificateRevocationCheck">false</parameter>
    
    <!--                                                                 -->             
    <!--                   Holodeck B2B Handlers                         -->             
    <!--                                                                 -->             
    
    <InFlow>
        <!-- Log the SOAP envelope -->
        <handler name="SOAPLog" class="org.holodeckb2b.ebms3.util.SOAPEnvelopeLogger">
            <order phase="ebms3InPhase" phaseFirst="true"/>      
        </handler>
        
        <!-- Indicate the ebMS header is processed by Holodeck B2B -->
        <handler name="ReportHeaderProcessed" class="org.holodeckb2b.ebms3.handlers.inflow.ReportHeaderProcessed">
            <order phase="ebms3InPhase" after="SOAPLog"/>      
        </handler>
        <!-- Catch a raised Fault and translate it into an EbMS Error -->
        <handler name="CatchFaults" class="org.holodeckb2b.ebms3.util.CatchAxisFault">
            <order phase="ebms3InPhase" after="ReportHeaderProcessed"/>      
        </handler>

        <!-- 
            Read the message units from the message 
        -->
        <handler name="ReadUserMessage" class="org.holodeckb2b.ebms3.handlers.inflow.ReadUserMessage">
            <order phase="ebms3InPhase" after="CatchFaults"/>      
        </handler>
        <handler name="ReadPullRequest" class="org.holodeckb2b.ebms3.handlers.inflow.ReadPullRequest">
            <order phase="ebms3InPhase" after="ReadUserMessage"/>      
        </handler>
        <handler name="ReadReceipts" class="org.holodeckb2b.ebms3.handlers.inflow.ReadReceipt">
            <order phase="ebms3InPhase" after="ReadPullRequest"/>
        </handler>
        <handler name="ReadErrors" class="org.holodeckb2b.ebms3.handlers.inflow.ReadError">
            <order phase="ebms3InPhase" after="ReadReceipts"/>
        </handler>
        <!--
            Find the P-Modes for the read message units except the PullRequests because 
            their P-Mode can only be determined based on the provided authentication info
            in the WS-Security header
        -->
        <handler name="FindPModes" class="org.holodeckb2b.ebms3.handlers.inflow.FindPModes">
            <order phase="ebms3InPhase" after="ReadErrors"/>      
        </handler>
        
        <!--
            Process and validate the WS-Security 
        -->
        <!-- Security handler responsible for processing the WSS headers -->
        <handler name="SetupWSSProcessing" class="org.holodeckb2b.security.handlers.SetupWSSProcessing">
            <order phase="ebms3InPhase" after="FindPModes"/>      
        </handler>
        <handler name="ProcessSecurityHeaders" class="org.holodeckb2b.security.handlers.ProcessWSSHeaders">
            <order phase="ebms3InPhase" after="SetupWSSProcessing"/>      
        </handler>
        <handler name="CheckWSSProcessing" class="org.holodeckb2b.security.handlers.ProcessSecurityFault">
            <order phase="ebms3InPhase" after="ProcessSecurityHeaders"/>      
        </handler>
        
        <!-- Authorize the message base on UsernameToken -->
        <handler name="AuthorizeMessage" class="org.holodeckb2b.ebms3.handlers.inflow.AuthorizeMessage">              
            <order phase="ebms3InPhase" after="CheckWSSProcessing"/>
        </handler>
                          
        <!--
            Process the user message
        -->
        <handler name="StartProcessingUsrMsg" class="org.holodeckb2b.ebms3.handlers.inflow.StartProcessingUsrMessage">
            <order phase="ebms3InPhase" after="AuthorizeMessage"/>      
        </handler>
        <handler name="CheckSignatureCompleteness" class="org.holodeckb2b.as4.handlers.inflow.CheckSignatureCompleteness">
            <order phase="ebms3InPhase" after="StartProcessingUsrMsg"/>      
        </handler>
        <handler name="AS4DeCompression" class="org.holodeckb2b.as4.compression.DecompressionHandler">
            <order phase="ebms3InPhase" after="CheckSignatureCompleteness"/>      
        </handler>
        <handler name="SavePayloads" class="org.holodeckb2b.ebms3.handlers.inflow.SaveUserMsgAttachments">
            <order phase="ebms3InPhase" after="AS4DeCompression"/>      
        </handler>
        <handler name="DuplicateCheck" class="org.holodeckb2b.as4.receptionawareness.DetectDuplicateUserMessages">
            <order phase="ebms3InPhase" after="SavePayloads"/>      
        </handler>
        <handler name="DeliverUserMessage" class="org.holodeckb2b.ebms3.handlers.inflow.DeliverUserMessage">
            <order phase="ebms3InPhase" after="DuplicateCheck"/>      
        </handler>
        <handler name="CreateReceipt" class="org.holodeckb2b.as4.handlers.inflow.CreateReceipt">
            <order phase="ebms3InPhase" after="DeliverUserMessage"/>      
        </handler>
        <!--
            Process the pull request
        -->        
        <handler name="AuthorizePullRequest" class="org.holodeckb2b.ebms3.handlers.inflow.FindPModesForPullRequest">
            <order phase="ebms3InPhase" after="CreateReceipt"/>
        </handler>
        <handler name="RetrievePulledMessage" class="org.holodeckb2b.ebms3.handlers.inflow.GetMessageUnitForPulling">
            <order phase="ebms3InPhase" after="AuthorizePullRequest"/>
        </handler>
        <!--
            Process the receipts
        -->
        <handler name="ProcessReceipts" class="org.holodeckb2b.ebms3.handlers.inflow.ProcessReceipts">
            <order phase="ebms3InPhase" after="RetrievePulledMessage"/>
        </handler>
        <handler name="DeliverReceipts" class="org.holodeckb2b.ebms3.handlers.inflow.DeliverReceipts">
            <order phase="ebms3InPhase" after="ProcessReceipts"/>
        </handler>
        <!--
            Process the errors
        -->
        <handler name="ProcessErrors" class="org.holodeckb2b.ebms3.handlers.inflow.ProcessErrors">
            <order phase="ebms3InPhase" after="DeliverReceipts"/>
        </handler>
        <handler name="DeliverErrors" class="org.holodeckb2b.ebms3.handlers.inflow.DeliverErrors">
            <order phase="ebms3InPhase" after="ProcessErrors"/>
        </handler>
        <!-- 
            Handler errors generated during message processing
        -->
        <handler name="ProcessGeneratedErrors" class="org.holodeckb2b.ebms3.handlers.inflow.ProcessGeneratedErrors">
            <order phase="ebms3InPhase" after="DeliverErrors"/>
        </handler>
    </InFlow>
    
    <InFaultFlow>
        <!-- Log the SOAP envelope -->
        <handler name="SOAPLog" class="org.holodeckb2b.ebms3.util.SOAPEnvelopeLogger">
            <order phase="ebms3InPhase" phaseFirst="true"/>      
        </handler>
        
        <!-- Indicate the ebMS header is processed by Holodeck B2B -->
        <handler name="ReportHeaderProcessed" class="org.holodeckb2b.ebms3.handlers.inflow.ReportHeaderProcessed">
            <order phase="ebms3InPhase" after="SOAPLog"/>      
        </handler>
        <!-- Catch a raised Fault and translate it into an EbMS Error -->
        <handler name="CatchFaults" class="org.holodeckb2b.ebms3.util.CatchAxisFault">
            <order phase="ebms3InPhase" after="ReportHeaderProcessed"/>      
        </handler>
        
        <!-- 
            Read the message units from the message 
        -->
        <handler name="ReadUserMessage" class="org.holodeckb2b.ebms3.handlers.inflow.ReadUserMessage">
            <order phase="ebms3InPhase" after="CatchFaults"/>      
        </handler>
        <handler name="ReadPullRequest" class="org.holodeckb2b.ebms3.handlers.inflow.ReadPullRequest">
            <order phase="ebms3InPhase" after="ReadUserMessage"/>      
        </handler>
        <handler name="ReadReceipts" class="org.holodeckb2b.ebms3.handlers.inflow.ReadReceipt">
            <order phase="ebms3InPhase" after="ReadPullRequest"/>
        </handler>
        <handler name="ReadErrors" class="org.holodeckb2b.ebms3.handlers.inflow.ReadError">
            <order phase="ebms3InPhase" after="ReadReceipts"/>
        </handler>
        <!--
            Find the P-Modes for the read message units except the PullRequests because 
            their P-Mode can only be determined based on the provided authentication info
            in the WS-Security header
        -->
        <handler name="FindPModes" class="org.holodeckb2b.ebms3.handlers.inflow.FindPModes">
            <order phase="ebms3InPhase" after="ReadErrors"/>      
        </handler>
        
        <!--
            Process and validate the WS-Security 
        -->
        <!-- Security handler responsible for processing the WSS headers -->
        <handler name="SetupWSSProcessing" class="org.holodeckb2b.security.handlers.SetupWSSProcessing">
            <order phase="ebms3InPhase" after="FindPModes"/>      
        </handler>
        <handler name="ProcessSecurityHeaders" class="org.holodeckb2b.security.handlers.ProcessWSSHeaders">
            <order phase="ebms3InPhase" after="SetupWSSProcessing"/>      
        </handler>
        <handler name="CheckWSSProcessing" class="org.holodeckb2b.security.handlers.ProcessSecurityFault">
            <order phase="ebms3InPhase" after="ProcessSecurityHeaders"/>      
        </handler>
        
        <!-- Authorize the message base on UsernameToken -->
        <handler name="AuthorizeMessage" class="org.holodeckb2b.ebms3.handlers.inflow.AuthorizeMessage">              
            <order phase="ebms3InPhase" after="CheckWSSProcessing"/>
        </handler>
        
        <!--
            Process the user message
        -->
        <handler name="StartProcessingUsrMsg" class="org.holodeckb2b.ebms3.handlers.inflow.StartProcessingUsrMessage">
            <order phase="ebms3InPhase" after="AuthorizeMessage"/>      
        </handler>
        <handler name="CheckSignatureCompleteness" class="org.holodeckb2b.as4.handlers.inflow.CheckSignatureCompleteness">
            <order phase="ebms3InPhase" after="StartProcessingUsrMsg"/>      
        </handler>
        <handler name="AS4DeCompression" class="org.holodeckb2b.as4.compression.DecompressionHandler">
            <order phase="ebms3InPhase" after="CheckSignatureCompleteness"/>      
        </handler>
        <handler name="SavePayloads" class="org.holodeckb2b.ebms3.handlers.inflow.SaveUserMsgAttachments">
            <order phase="ebms3InPhase" after="AS4DeCompression"/>      
        </handler>
        <handler name="DuplicateCheck" class="org.holodeckb2b.as4.receptionawareness.DetectDuplicateUserMessages">
            <order phase="ebms3InPhase" after="SavePayloads"/>      
        </handler>
        <handler name="DeliverUserMessage" class="org.holodeckb2b.ebms3.handlers.inflow.DeliverUserMessage">
            <order phase="ebms3InPhase" after="DuplicateCheck"/>      
        </handler>
        <handler name="CreateReceipt" class="org.holodeckb2b.as4.handlers.inflow.CreateReceipt">
            <order phase="ebms3InPhase" after="DeliverUserMessage"/>      
        </handler>
        <!--
            Process the pull request
        -->        
        <handler name="AuthorizePullRequest" class="org.holodeckb2b.ebms3.handlers.inflow.FindPModesForPullRequest">
            <order phase="ebms3InPhase" after="CreateReceipt"/>
        </handler>
        <handler name="RetrievePulledMessage" class="org.holodeckb2b.ebms3.handlers.inflow.GetMessageUnitForPulling">
            <order phase="ebms3InPhase" after="AuthorizePullRequest"/>
        </handler>
        <!--
            Process the receipts
        -->
        <handler name="ProcessReceipts" class="org.holodeckb2b.ebms3.handlers.inflow.ProcessReceipts">
            <order phase="ebms3InPhase" after="RetrievePulledMessage"/>
        </handler>
        <handler name="DeliverReceipts" class="org.holodeckb2b.ebms3.handlers.inflow.DeliverReceipts">
            <order phase="ebms3InPhase" after="ProcessReceipts"/>
        </handler>
        <!--
            Process the errors
        -->
        <handler name="ProcessErrors" class="org.holodeckb2b.ebms3.handlers.inflow.ProcessErrors">
            <order phase="ebms3InPhase" after="DeliverReceipts"/>
        </handler>
        <handler name="DeliverErrors" class="org.holodeckb2b.ebms3.handlers.inflow.DeliverErrors">
            <order phase="ebms3InPhase" after="ProcessErrors"/>
        </handler>
        <!-- 
            Handler errors generated during message processing
        -->
        <handler name="ProcessGeneratedErrors" class="org.holodeckb2b.ebms3.handlers.inflow.ProcessGeneratedErrors">
            <order phase="ebms3InPhase" after="DeliverErrors"/>
        </handler>
    </InFaultFlow>
    
    <OutFlow>
        <handler name="PrepareResponseMessage" 
           class="org.holodeckb2b.ebms3.handlers.outflow.PrepareResponseMessage">
            <order phase="ebms3OutPhase" phaseFirst="true"/>
        </handler>
        <handler name="BundleErrorMessages" 
            class="org.holodeckb2b.ebms3.handlers.outflow.AddErrorSignals">
            <order phase="ebms3OutPhase" after="PrepareResponseMessage" />
        </handler>
        <handler name="BundleReceiptMessages" 
            class="org.holodeckb2b.ebms3.handlers.outflow.AddReceiptSignals">
            <order phase="ebms3OutPhase" after="BundleErrorMessages" />
        </handler>
        <handler name="CreateSOAPEnvelope" 
            class="org.holodeckb2b.ebms3.handlers.outflow.CreateSOAPEnvelopeHandler">
            <order phase="ebms3OutPhase" after="BundleReceiptMessages"/>
        </handler>
        <handler name="AddPayloads" 
           class="org.holodeckb2b.ebms3.handlers.outflow.AddPayloads">
            <order phase="ebms3OutPhase" after="CreateSOAPEnvelope"/>
        </handler>
        <handler name="AS4Compression" class="org.holodeckb2b.as4.compression.CompressionHandler">
            <order phase="ebms3OutPhase" after="AddPayloads"/>
        </handler>
        <handler name="PackageUserMessage" 
            class="org.holodeckb2b.ebms3.handlers.outflow.PackageUsermessageInfo">
            <order phase="ebms3OutPhase" after="AS4Compression"/>
        </handler>
        <handler name="PackageErrorSignals" 
           class="org.holodeckb2b.ebms3.handlers.outflow.PackageErrorSignals">
            <order phase="ebms3OutPhase" after="PackageUserMessage"/>
        </handler>
        <handler name="PackageReceipt" 
           class="org.holodeckb2b.ebms3.handlers.outflow.PackageReceiptSignal">
            <order phase="ebms3OutPhase" after="PackageErrorSignals"/>
        </handler>
        <handler name="PackagePullRequest" 
           class="org.holodeckb2b.ebms3.handlers.outflow.PackagePullRequestSignal">
            <order phase="ebms3OutPhase" after="PackageReceipt"/>
        </handler>
        
        
        <!-- Security handlers responsible for adding the WSS headers -->
        <handler name="GetSecuritySettings" class="org.holodeckb2b.security.handlers.GetSecurityConfiguration">
            <order phase="Security" phaseFirst="true"/>      
        </handler>
        <handler name="CreateSecurityHeaders" class="org.holodeckb2b.security.handlers.CreateWSSHeaders">
            <order phase="Security" after="GetSecuritySettings"/>      
        </handler>

        <!-- Handlers responsible for configuration and checking of message transport -->
        <handler name="ConfigureHTTP" 
            class="org.holodeckb2b.ebms3.handlers.outflow.ConfigureHTTPTransportHandler">
            <order phase="MessageOut" />
        </handler>
        <handler name="CheckSentResult" 
            class="org.holodeckb2b.ebms3.handlers.outflow.CheckSentResult">
            <order phase="MessageOut" after="ConfigureHTTP" />
        </handler>                
        <!-- Log the SOAP envelope of the outgoing message -->
        <handler name="SOAPLog" class="org.holodeckb2b.ebms3.util.SOAPEnvelopeLogger">
            <order phase="MessageOut" after="CheckSentResult"/>      
        </handler>
    </OutFlow>
    

    <OutFaultFlow>
        <handler name="PrepareResponseMessage" 
            class="org.holodeckb2b.ebms3.handlers.outflow.PrepareResponseMessage">
            <order phase="ebms3OutPhase" phaseFirst="true"/>
        </handler>
        <handler name="BundleErrorMessages" 
            class="org.holodeckb2b.ebms3.handlers.outflow.AddErrorSignals">
            <order phase="ebms3OutPhase" after="PrepareResponseMessage" />
        </handler>
        <handler name="BundleReceiptMessages" 
            class="org.holodeckb2b.ebms3.handlers.outflow.AddReceiptSignals">
            <order phase="ebms3OutPhase" after="BundleErrorMessages" />
        </handler>
        <handler name="CreateSOAPEnvelope" 
            class="org.holodeckb2b.ebms3.handlers.outflow.CreateSOAPEnvelopeHandler">
            <order phase="ebms3OutPhase" after="BundleReceiptMessages"/>
        </handler>
        <handler name="AddPayloads" 
            class="org.holodeckb2b.ebms3.handlers.outflow.AddPayloads">
            <order phase="ebms3OutPhase" after="CreateSOAPEnvelope"/>
        </handler>
        <handler name="AS4Compression" class="org.holodeckb2b.as4.compression.CompressionHandler">
            <order phase="ebms3OutPhase" after="AddPayloads"/>
        </handler>
        <handler name="PackageUserMessage" 
            class="org.holodeckb2b.ebms3.handlers.outflow.PackageUsermessageInfo">
            <order phase="ebms3OutPhase" after="AS4Compression"/>
        </handler>
        <handler name="PackageErrorSignals" 
            class="org.holodeckb2b.ebms3.handlers.outflow.PackageErrorSignals">
            <order phase="ebms3OutPhase" after="AS4Compression"/>
        </handler>
        <handler name="PackageReceipt" 
            class="org.holodeckb2b.ebms3.handlers.outflow.PackageReceiptSignal">
            <order phase="ebms3OutPhase" after="PackageErrorSignals"/>
        </handler>
        <handler name="PackagePullRequest" 
            class="org.holodeckb2b.ebms3.handlers.outflow.PackagePullRequestSignal">
            <order phase="ebms3OutPhase" after="PackageReceipt"/>
        </handler>
        
        <!-- Security handlers responsible for adding the WSS headers -->
        <handler name="GetSecuritySettings" class="org.holodeckb2b.security.handlers.GetSecurityConfiguration">
            <order phase="Security" phaseFirst="true"/>      
        </handler>
        <handler name="CreateSecurityHeaders" class="org.holodeckb2b.security.handlers.CreateWSSHeaders">
            <order phase="Security" after="GetSecuritySettings"/>      
        </handler>
        
        <!-- Handlers responsible for configuration and checking of message transport -->
        <handler name="ConfigureHTTP" 
            class="org.holodeckb2b.ebms3.handlers.outflow.ConfigureHTTPTransportHandler">
            <order phase="MessageOut" />
        </handler>
        <handler name="CheckSentResult" 
            class="org.holodeckb2b.ebms3.handlers.outflow.CheckSentResult">
            <order phase="MessageOut" after="ConfigureHTTP" />
        </handler>   
        <!-- Log the SOAP envelope of the outgoing message -->
        <handler name="SOAPLog" class="org.holodeckb2b.ebms3.util.SOAPEnvelopeLogger">
            <order phase="MessageOut" after="CheckSentResult"/>      
        </handler>
    </OutFaultFlow>
    
</module>